{"version":3,"sources":["components/ButtonAppBar.tsx","axios/api.tsx","components/moveViewer/MoveAccordion.tsx","components/moveViewer/MoveViewer.tsx","components/itemAccordion/ItemAccordion.tsx","components/pokemonCard/PokemonCard.tsx","test/TestCharles.tsx","components/PartySelectScreen/PartySelectScreen.tsx","components/PartySelectScreen/AddParty.tsx","test/TestLarry.tsx","test/TestEldon.tsx","test/TestJammie.tsx","components/Login.tsx","components/Signup.tsx","components/addPokemon/AddPokemon.tsx","types/types.tsx","components/addPokemon/UserIDSelect.tsx","components/PartyScreen/PartyScreen.tsx","components/adminView/AdminView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","to","Button","apiUrl","getBasePokemon","myPokedexNumber","axios","post","fname","dataPacket","pokedexNumber","deletePokemon","pokeID","id77","getItem","itemName","name77","getPartyGivenUsername","username","deleteParty","partyID","addParty","userID","getImagesURLS","getMove","moveName","learnMove","pokemonID","moveA","moveB","moveC","moveD","pk_id","move1","move2","move3","move4","getSpecificPokemon","pkid","pokemonid","verifyPassword","password","createAccount","width","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","color","palette","text","secondary","MoveAccordion","props","panel","learnedMoves","index","move","allMoves","setLearnedMoves","React","useState","expanded","setExpanded","Accordion","onChange","event","isExpanded","AccordionSummary","expandIcon","aria-controls","id","move_name","effect","AccordionDetails","Autocomplete","options","getOptionLabel","option","style","value","newMoves","forEach","val","push","Object","assign","console","log","renderInput","params","TextField","label","MoveViewer","moves","setMoves","button","margin","ItemAccordion","item","allItems","setItem","item_name","item_description","size","startIcon","onClick","loseItem","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","PokemonCard","setAllMoves","setAllItems","pkID","nickname","level","pokedex_number","name","type1","type2","hp","attack","defense","special_attack","special_defense","speed","sprite_data","power","accuracy","type","pp","pkmn","setPkmn","useEffect","then","res","data","getHeldItem","getLearnedMoves","holding","Card","CardHeader","Avatar","aria-label","action","IconButton","subheader","CardMedia","image","CardContent","component","align","CardActions","disableSpacing","alert","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","clsx","aria-expanded","Collapse","in","timeout","unmountOnExit","paragraph","length","TestCharles","count","setCount","base","setBase","baseInfo","myBulbasaur","sprite","arr","Grid","container","justify","xs","src","e","target","map","num","makeButton","items","i","genParty","paper","padding","textAlign","PartySelectScreen","partID","imageURLs","setimageURLs","url","AddParty","user_ID","Icon","catch","fullWidth","TestLarry","partyid","setUsername","handleInputChange","TestEldon","poki1","party1","party_id","member","partyDel","setPartyDel","setMove","pokeDel","setPokeDel","itemDel","login1","user","test","setTest","test2","setTest2","TestJammie","moveLearned","setAddParty","display","flexWrap","loginBtn","marginTop","header","background","card","initialState","isButtonDisabled","helperText","isError","loggedIn","reducer","state","payload","Login","useReducer","dispatch","trim","handleLogin","handleKeyPress","keyCode","which","partyArr","setPartyArr","makeParty","noValidate","autoComplete","error","placeholder","onKeyPress","disabled","confirm","handleSignup","textField","AddPokemon","party_Id","allBasePokemon","setAllBasePokemon","InputLabelProps","shrink","lev","UserIDSelect","pid","setPid","direction","alignItems","minHeight","PartyScreen","pkids","thispartyID","partyIDs","setPartyIDs","getPartyIDs","AdminView","userId","setUserId","partyId","setPartyId","myPartyIds","setMyPartyIds","partyNumbers","setPartyNumbers","uid","partyIDArray","App","exact","path","Signup","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2ef41aa3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nexport default function ButtonAppBar() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n  \r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Pokemon Party Manager\r\n                    </Typography>\r\n\r\n                    {/* <Link to=\"/test/charles\">\r\n                        <Button>Charles</Button>\r\n                    </Link>\r\n\r\n                    <Link to=\"/test/larry\">\r\n                        <Button>Larry</Button>\r\n                    </Link>\r\n\r\n                    <Link to=\"/test/eldon\">\r\n                        <Button>Eldon</Button>\r\n                    </Link>\r\n\r\n                    <Link to=\"/test/jammie\">\r\n                        <Button>Jammie</Button>\r\n                    </Link> */}\r\n                    <Link to=\"/components/Login\">\r\n                        <Button>Login</Button>\r\n                    </Link>\r\n                    <Link to=\"/components/Signup\">\r\n                        <Button>Signup</Button>\r\n                    </Link>\r\n                    <Link to=\"/components/HomeView\">\r\n                        <Button>Home</Button>\r\n                    </Link>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n","import axios from 'axios';\r\nimport {\r\n    Boat,\r\n    BasePokemon,\r\n    Item,\r\n    Party,\r\n    User,\r\n    Move,\r\n    Pokemon,\r\n    Loginer,\r\n    PokemonPacket,\r\n    imageURL,\r\n    partyID,\r\n    pkids,\r\n} from '../types/types';\r\n\r\n//const apiUrl = 'http://localhost/cs4750/pokemon-party-manager/src/php/';\r\nconst apiUrl = 'http://www.cs.virginia.edu/~jw8kc/pokemon-party-manager/src/php/';\r\n\r\nexport function getAllBoats() {\r\n    return axios.post<Boat[]>(apiUrl + 'getAllBoats.php', { fname: 'getAllBoats' });\r\n}\r\n\r\nexport function getABoat() {\r\n    return axios.post<Boat>(apiUrl + 'getAllBoats.php', { fname: 'getABoat' });\r\n}\r\n\r\nexport function addBoat(boat: Boat) {\r\n    return axios.post(apiUrl + 'addBoat.php', { fname: 'addBoat', dataPacket: boat });\r\n}\r\n\r\nexport function getBasePokemon(myPokedexNumber: number) {\r\n    return axios.post<BasePokemon>(apiUrl + 'pokemon.php', {\r\n        fname: 'getBasePokemon',\r\n        dataPacket: { pokedexNumber: myPokedexNumber },\r\n    });\r\n}\r\n\r\nexport function deletePokemon(pokeID: number) {\r\n    return axios.post<Pokemon>(apiUrl + 'pokemon.php', { fname: 'deletePokemon', dataPacket: { id77: pokeID } });\r\n}\r\n\r\n//Items\r\nexport function getItem(itemName: String) {\r\n    return axios.post<Item>(apiUrl + 'item.php', { fname: 'getItem', dataPacket: { name77: itemName } });\r\n}\r\n\r\nexport function getHeldItem(pk_id: number) {\r\n    return axios.post<Item>(apiUrl + 'item.php', { fname: 'getHeldItem', dataPacket: { pk_id: pk_id } });\r\n}\r\n\r\nexport function gainItem(pokemonID: number, itemName: String) {\r\n    return axios.post<Item>(apiUrl + 'item.php', {\r\n        fname: 'gainItem',\r\n        dataPacket: { pk_id: pokemonID, name77: itemName },\r\n    });\r\n} // Jammie\r\n\r\nexport function getAllItems() {\r\n    return axios.post<Item[]>(apiUrl + 'item.php', { fname: 'getAllItems', dataPacket: {} });\r\n}\r\n\r\nexport function loseItem(pk_id: number, itemName: String) {\r\n    return axios.post<Item>(apiUrl + 'item.php', { fname: 'loseItem', dataPacket: { pk_id: pk_id, name77: itemName } });\r\n}\r\n\r\n//Party\r\nexport function getParty(partyID: number) {\r\n    return axios.post<number[]>(apiUrl + 'party.php', { fname: 'getParty', dataPacket: { id77: partyID } });\r\n}\r\n\r\nexport function getPartyGivenUsername(username: String) {\r\n    return axios.post<partyID[]>(apiUrl + 'party.php', {\r\n        fname: 'getPartyGivenUsername',\r\n        dataPacket: { id77: username },\r\n    });\r\n}\r\n\r\nexport function deleteParty(partyID: number) {\r\n    return axios.post<Party>(apiUrl + 'party.php', { fname: 'deleteParty', dataPacket: { id77: partyID } });\r\n}\r\n\r\nexport function addParty(userID: number) {\r\n    return axios.post<Party>(apiUrl + 'party.php', { fname: 'addParty', dataPacket: { id77: userID } });\r\n} // Jammie\r\n\r\nexport function getImagesURLS(partyID: number) {\r\n    return axios.post<imageURL[]>(apiUrl + 'party.php', {\r\n        fname: 'getImagesURLS',\r\n        dataPacket: { id77: partyID },\r\n    });\r\n}\r\n\r\n//User\r\nexport function getUser(userID: number) {\r\n    return axios.post<User>(apiUrl + 'user.php', { fname: 'getUser', dataPacket: { id77: userID } });\r\n}\r\n\r\nexport function getUserID(username: String) {\r\n    return axios.post<User>(apiUrl + 'user.php', { fname: 'getUserID', dataPacket: { id77: username } });\r\n}\r\n\r\n//Move\r\nexport function getMove(moveName: String) {\r\n    return axios.post<Move>(apiUrl + 'move.php', { fname: 'getMove', dataPacket: { name77: moveName } });\r\n}\r\n\r\nexport function getAllMoves() {\r\n    return axios.post<Move[]>(apiUrl + 'move.php', { fname: 'getAllMoves', dataPacket: {} });\r\n}\r\n\r\nexport function getLearnedMoves(pk_id: number) {\r\n    return axios.post<Move[]>(apiUrl + 'move.php', { fname: 'getLearnedMoves', dataPacket: { pk_id: pk_id } });\r\n}\r\n\r\nexport function learnMove(pokemonID: number, moveA: String, moveB: String, moveC: String, moveD: String) {\r\n    return axios.post<Move>(apiUrl + 'move.php', {\r\n        fname: 'learnMove',\r\n        dataPacket: { pk_id: pokemonID, move1: moveA, move2: moveB, move3: moveC, move4: moveD },\r\n    });\r\n} // Jammie\r\n\r\nexport function forgetMove(pokemonID: number, moveName: String) {\r\n    return axios.post<Move>(apiUrl + 'move.php', {\r\n        fname: 'forgetMove',\r\n        dataPacket: { pk_id: pokemonID, name77: moveName },\r\n    });\r\n} // Jammie\r\n//Something for specific pokemon\r\nexport function getSpecificPokemon(pkid: number) {\r\n    return axios.post<PokemonPacket>(apiUrl + 'pokemon.php', {\r\n        fname: 'getSpecificPokemon',\r\n        dataPacket: { pokemonid: pkid },\r\n    });\r\n}\r\n\r\nexport function addPokemon(pokedexNumber: number, lev: number, nickname: String, party_id: number) {\r\n    return axios.post<string>(apiUrl + 'pokemon.php', {\r\n        fname: 'addPokemon',\r\n        dataPacket: { pokedex_number: pokedexNumber, level: lev, nickname: nickname, party_id: party_id },\r\n    });\r\n}\r\n\r\n//Passwords\r\nexport function verifyPassword(username: String, password: String) {\r\n    return axios.post<Loginer>(apiUrl + 'login.php', {\r\n        fname: 'verifyPassword',\r\n        dataPacket: { username: username, password: password },\r\n    });\r\n}\r\n\r\nexport function createAccount(username: String, password: String) {\r\n    return axios.post<Loginer>(apiUrl + 'login.php', {\r\n        fname: 'createAccount',\r\n        dataPacket: { username: username, password: password },\r\n    });\r\n}\r\n\r\nexport function getAllBasePokemon() {\r\n    return axios.post<BasePokemon[]>(apiUrl + 'pokemon.php', { fname: 'getAllBasePokemon', dataPacket: {} });\r\n}\r\n\r\nexport function getPartyIDs(partyID: number) {\r\n    return axios.post<pkids[]>(apiUrl + 'party.php', { fname: 'getPartyIDs', dataPacket: { id77: partyID } });\r\n}\r\n\r\n\r\nexport function getPartyGivenUserId(uid: number) {\r\n    return axios.post<partyID[]>(apiUrl + 'party.php', { fname: 'getPartyGivenUserId', dataPacket: { uid: uid } });\r\n}","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\n\nimport { Move } from '../../types/types';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n        },\n        heading: {\n            fontSize: theme.typography.pxToRem(15),\n            flexBasis: '33.33%',\n            flexShrink: 0,\n        },\n        secondaryHeading: {\n            fontSize: theme.typography.pxToRem(15),\n            color: theme.palette.text.secondary,\n        },\n    }),\n);\n\ninterface WelcomeProps {\n    learnedMoves: Move[];\n    index: number;\n    allMoves: Move[];\n    setLearnedMoves: (moves: Move[]) => void;\n}\n\nconst MoveAccordion: React.FC<WelcomeProps> = (props) => {\n    let learnedMoves: Move[] = props.learnedMoves;\n    let index: number = props.index;\n    let move = learnedMoves[index];\n    let allMoves = props.allMoves;\n    let setLearnedMoves = props.setLearnedMoves;\n\n    const classes = useStyles();\n    const [expanded, setExpanded] = React.useState<string | false>(false);\n\n    const handleChange = (panel: string) => (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\n        setExpanded(isExpanded ? panel : false);\n    };\n\n    function handleInputChange(event, value) {\n        let newMoves: Move[] = [];\n        learnedMoves.forEach((val) => newMoves.push(Object.assign({}, val)));\n        newMoves[index] = value;\n        console.log(newMoves);\n        setLearnedMoves(newMoves);\n    }\n\n    return (\n        <>\n            <Accordion expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n                <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1bh-content\" id=\"panel1bh-header\">\n                    <Typography className={classes.heading}>{move ? move.move_name : 'Empty'}</Typography>\n                    <Typography className={classes.secondaryHeading}>{move ? move.effect : ''}</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Autocomplete\n                        id={'combo-box-demo'}\n                        options={allMoves}\n                        getOptionLabel={(option) => option.move_name}\n                        style={{ width: 300 }}\n                        onChange={handleInputChange}\n                        renderInput={(params) => <TextField {...params} label=\"Move Selection\" variant=\"outlined\" />}\n                    />\n                </AccordionDetails>\n            </Accordion>\n        </>\n    );\n};\n\nexport default MoveAccordion;\n","import React from 'react';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\n\r\nimport { Move } from '../../types/types';\r\nimport MoveAccordion from './MoveAccordion';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n        },\r\n        heading: {\r\n            fontSize: theme.typography.pxToRem(15),\r\n            flexBasis: '33.33%',\r\n            flexShrink: 0,\r\n        },\r\n        secondaryHeading: {\r\n            fontSize: theme.typography.pxToRem(15),\r\n            color: theme.palette.text.secondary,\r\n        },\r\n    }),\r\n);\r\n\r\ninterface WelcomeProps {\r\n    moves: Move[];\r\n    allMoves: Move[];\r\n    setMoves: (moves: Move[]) => void;\r\n}\r\n\r\nconst MoveViewer: React.FC<WelcomeProps> = (props) => {\r\n    let moves: Move[] = props.moves;\r\n    let allMoves: Move[] = props.allMoves;\r\n    let setMoves = props.setMoves;\r\n\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = React.useState<string | false>(false);\r\n\r\n    const handleChange = (panel: string) => (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\r\n        setExpanded(isExpanded ? panel : false);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <MoveAccordion learnedMoves={moves} index={0} allMoves={allMoves} setLearnedMoves={setMoves}>\r\n                {' '}\r\n            </MoveAccordion>\r\n            <MoveAccordion learnedMoves={moves} index={1} allMoves={allMoves} setLearnedMoves={setMoves}>\r\n                {' '}\r\n            </MoveAccordion>\r\n            <MoveAccordion learnedMoves={moves} index={2} allMoves={allMoves} setLearnedMoves={setMoves}>\r\n                {' '}\r\n            </MoveAccordion>\r\n            <MoveAccordion learnedMoves={moves} index={3} allMoves={allMoves} setLearnedMoves={setMoves}>\r\n                {' '}\r\n            </MoveAccordion>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MoveViewer;\r\n","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport { Item } from '../../types/types';\nimport { loseItem } from '../../axios/api';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n        },\n        heading: {\n            fontSize: theme.typography.pxToRem(15),\n            flexBasis: '33.33%',\n            flexShrink: 0,\n        },\n        secondaryHeading: {\n            fontSize: theme.typography.pxToRem(15),\n            color: theme.palette.text.secondary,\n        },\n        button: {\n            margin: theme.spacing(1),\n        },\n    }),\n);\n\ninterface WelcomeProps {\n    item: Item;\n    allItems: Item[];\n    setItem: (item: Item) => void;\n    pk_id: number;\n}\n\nconst ItemAccordion: React.FC<WelcomeProps> = (props) => {\n    let item: Item = props.item;\n    let allItems: Item[] = props.allItems;\n    let setItem = props.setItem;\n    let pk_id = props.pk_id;\n\n    const classes = useStyles();\n    const [expanded, setExpanded] = React.useState<string | false>(false);\n\n    const handleChange = (panel: string) => (event: React.ChangeEvent<{}>, isExpanded: boolean) => {\n        setExpanded(isExpanded ? panel : false);\n    };\n\n    function handleInputChange(event, value) {\n        setItem(value);\n    }\n\n    const handleDrop = () => {\n        loseItem(pk_id, item.item_name);\n        setItem(null);\n    };\n\n    return (\n        <>\n            <Accordion expanded={expanded === 'itemPanel1'} onChange={handleChange('itemPanel1')}>\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"itemPanel1bh-content\"\n                    id=\"itemPanel1bh-header\"\n                >\n                    <Typography className={classes.heading}>{item ? item.item_name : 'Empty'}</Typography>\n                    <Typography className={classes.secondaryHeading}>{item ? item.item_description : ''}</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Autocomplete\n                        id=\"combo-box-item\"\n                        options={allItems}\n                        getOptionLabel={(option) => option.item_name}\n                        onChange={handleInputChange}\n                        style={{ width: 300 }}\n                        renderInput={(params) => <TextField {...params} label=\"Item Selection\" variant=\"outlined\" />}\n                    />\n\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        size=\"small\"\n                        startIcon={<DeleteIcon />}\n                        onClick={handleDrop}\n                    ></Button>\n                </AccordionDetails>\n            </Accordion>\n        </>\n    );\n};\n\nexport default ItemAccordion;\n","import React from 'react'; // we need this to make JSX compile\r\nimport { Item, Move, PokemonPacket } from '../../types/types';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport MoveViewer from '../moveViewer/MoveViewer';\r\nimport ItemAccordion from '../itemAccordion/ItemAccordion';\r\nimport {\r\n    getAllMoves,\r\n    getAllItems,\r\n    getSpecificPokemon,\r\n    getHeldItem,\r\n    getLearnedMoves,\r\n    gainItem,\r\n    learnMove,\r\n    deletePokemon,\r\n} from '../../axios/api';\r\n\r\nimport clsx from 'clsx';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { red } from '@material-ui/core/colors';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Button from '@material-ui/core/Button';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\n\r\ninterface WelcomeProps {\r\n    pk_id: number;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {},\r\n        media: {\r\n            height: 0,\r\n            paddingTop: '100.00%', // 16:9\r\n        },\r\n        expand: {\r\n            transform: 'rotate(0deg)',\r\n            marginLeft: 'auto',\r\n            transition: theme.transitions.create('transform', {\r\n                duration: theme.transitions.duration.shortest,\r\n            }),\r\n        },\r\n        expandOpen: {\r\n            transform: 'rotate(180deg)',\r\n        },\r\n        avatar: {\r\n            backgroundColor: red[500],\r\n        },\r\n        button: {\r\n            margin: theme.spacing(1),\r\n        },\r\n    }),\r\n);\r\n\r\nconst PokemonCard: React.FC<WelcomeProps> = (props) => {\r\n    let pk_id = props.pk_id;\r\n\r\n    let emptyMoves: Move[] = [\r\n        {\r\n            move_name: 'm0',\r\n            power: 40,\r\n            accuracy: 100,\r\n            type: 'Poison',\r\n            pp: 30,\r\n            effect: 'e0',\r\n        },\r\n        {\r\n            move_name: 'm1',\r\n            power: 40,\r\n            accuracy: 100,\r\n            type: 'Poison',\r\n            pp: 30,\r\n            effect: 'e1',\r\n        },\r\n        {\r\n            move_name: 'm2',\r\n            power: 40,\r\n            accuracy: 100,\r\n            type: 'Poison',\r\n            pp: 30,\r\n            effect: 'e2',\r\n        },\r\n        {\r\n            move_name: 'm3',\r\n            power: 40,\r\n            accuracy: 100,\r\n            type: 'Poison',\r\n            pp: 30,\r\n            effect: 'e3',\r\n        },\r\n    ];\r\n\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = React.useState(false);\r\n    const [allMoves, setAllMoves] = React.useState<Move[]>([]);\r\n    const [allItems, setAllItems] = React.useState<Item[]>([]);\r\n    const [pkmn, setPkmn] = React.useState<PokemonPacket>({\r\n        pkID: 1,\r\n        nickname: 'Loading',\r\n        level: 0,\r\n        pokedex_number: 1,\r\n        name: '',\r\n        type1: '',\r\n        type2: '',\r\n        hp: 0,\r\n        attack: 0,\r\n        defense: 0,\r\n        special_attack: 0,\r\n        special_defense: 0,\r\n        speed: 0,\r\n        sprite_data: '',\r\n        moves: emptyMoves,\r\n    });\r\n    const [item, setItem] = React.useState<Item>();\r\n    const [learnedMoves, setLearnedMoves] = React.useState<Move[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        getAllMoves().then((res) => {\r\n            setAllMoves(res.data);\r\n        });\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        getAllItems().then((res) => {\r\n            setAllItems(res.data);\r\n        });\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        getSpecificPokemon(pk_id).then((res) => {\r\n            setPkmn(res.data);\r\n        });\r\n        getHeldItem(pk_id).then((res) => {\r\n            setItem(res.data);\r\n        });\r\n        getLearnedMoves(pk_id)\r\n            .then((res) => {\r\n                setLearnedMoves(res.data);\r\n            })\r\n            .then(() => {\r\n                console.log(learnedMoves);\r\n            });\r\n    }, [pk_id]);\r\n\r\n    React.useEffect(() => {\r\n        setPkmn({ ...pkmn, holding: item });\r\n    }, [item]);\r\n\r\n    React.useEffect(() => {\r\n        setPkmn({ ...pkmn, moves: learnedMoves });\r\n    }, [learnedMoves]);\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (pkmn.holding) {\r\n            gainItem(pk_id, pkmn.holding.item_name);\r\n        }\r\n        if (pkmn.moves.length == 4) {\r\n            learnMove(\r\n                pk_id,\r\n                pkmn.moves[0].move_name,\r\n                pkmn.moves[1].move_name,\r\n                pkmn.moves[2].move_name,\r\n                pkmn.moves[3].move_name,\r\n            );\r\n            alert('Saved!');\r\n        } else {\r\n            alert('You must have four moves!');\r\n        }\r\n    };\r\n\r\n    const handleSetItem = (item: Item) => {\r\n        setItem(item);\r\n    };\r\n\r\n    const handleSetLearnedMoves = (moves: Move[]) => {\r\n        setLearnedMoves(moves);\r\n    };\r\n\r\n    const handleDelete = () => {\r\n        deletePokemon(pk_id);\r\n        alert('You deleted PK_ID: ' + pk_id);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Card className={classes.root}>\r\n                <CardHeader\r\n                    avatar={\r\n                        <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n                            {pkmn ? pkmn.level : 0}\r\n                        </Avatar>\r\n                    }\r\n                    action={\r\n                        <IconButton aria-label=\"settings\">\r\n                            <MoreVertIcon />\r\n                        </IconButton>\r\n                    }\r\n                    title={pkmn ? pkmn.name : ''}\r\n                    subheader={pkmn ? pkmn.nickname + ' PK_ID: ' + pk_id : ''}\r\n                />\r\n                <CardMedia className={classes.media} image={pkmn.sprite_data} title={pkmn.name} />\r\n                <CardContent>\r\n                    {pkmn && (\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\" align=\"right\">\r\n                            HP: {pkmn.hp} <br />\r\n                            Attack: {pkmn.attack} <br />\r\n                            Defense: {pkmn.defense} <br />\r\n                            Special Attack: {pkmn.special_attack} <br />\r\n                            Special Defense: {pkmn.special_defense} <br />\r\n                            Speed: {pkmn.speed} <br />\r\n                        </Typography>\r\n                    )}\r\n                </CardContent>\r\n                <CardActions disableSpacing>\r\n                    <IconButton aria-label=\"delete\" onClick={handleDelete}>\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                    <IconButton\r\n                        aria-label=\"share\"\r\n                        onClick={() => {\r\n                            var dataStr = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(pkmn));\r\n                            var downloadAnchorNode = document.createElement('a');\r\n                            downloadAnchorNode.setAttribute('href', dataStr);\r\n                            downloadAnchorNode.setAttribute('download', 'pkmn.json');\r\n                            document.body.appendChild(downloadAnchorNode); // required for firefox\r\n                            downloadAnchorNode.click();\r\n                            downloadAnchorNode.remove();\r\n                        }}\r\n                    >\r\n                        <GetAppIcon />\r\n                    </IconButton>\r\n                    <IconButton\r\n                        className={clsx(classes.expand, {\r\n                            [classes.expandOpen]: expanded,\r\n                        })}\r\n                        onClick={handleExpandClick}\r\n                        aria-expanded={expanded}\r\n                        aria-label=\"show more\"\r\n                    >\r\n                        <ExpandMoreIcon />\r\n                    </IconButton>\r\n                </CardActions>\r\n                <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                    <CardContent>\r\n                        <Typography paragraph>Item:</Typography>\r\n                        <ItemAccordion item={item} allItems={allItems} setItem={handleSetItem} pk_id={pk_id}>\r\n                            {' '}\r\n                        </ItemAccordion>\r\n                        <br></br>\r\n                        <Typography paragraph>Moves:</Typography>\r\n                        <MoveViewer\r\n                            moves={learnedMoves}\r\n                            allMoves={allMoves}\r\n                            setMoves={handleSetLearnedMoves}\r\n                        ></MoveViewer>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            className={classes.button}\r\n                            startIcon={<SaveIcon />}\r\n                            onClick={handleSave}\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    </CardContent>\r\n                </Collapse>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default PokemonCard;\r\n","import React, { useState } from 'react';\nimport { getBasePokemon, getItem, addPokemon, getSpecificPokemon, getLearnedMoves } from '../axios/api';\nimport { BasePokemon, Item, Pokemon, Move } from '../types/types';\nimport TextField from '@material-ui/core/TextField';\nimport PokemonCard from '../components/pokemonCard/PokemonCard';\nimport { Grid } from '@material-ui/core';\n\nfunction TestCharles() {\n    // Declare a new state variable, which we'll call \"count\"\n    let bulbasaur: BasePokemon = {\n        pokedex_number: 1,\n        name: 'Bulbasaur',\n        type1: 'Grass',\n        type2: 'Poison',\n        hp: 45,\n        attack: 49,\n        defense: 49,\n        special_attack: 65,\n        special_defense: 65,\n        speed: 45,\n        sprite_data: 'https://img.pokemondb.net/artwork/bulbasaur.jpg',\n    };\n\n    const [count, setCount] = useState<number>(1);\n    const [base, setBase] = useState<BasePokemon>(bulbasaur);\n    const [item, setItem] = useState<Item>();\n\n    React.useEffect(() => {\n        getBasePokemon(count).then((res) => {\n            setBase(res.data);\n        });\n    }, []);\n\n    React.useEffect(() => {\n        getBasePokemon(count).then((res) => {\n            setBase(res.data);\n        });\n    }, [count]);\n\n    React.useEffect(() => {\n        setPkmn({ ...pkmn, baseInfo: base });\n    }, [base]);\n\n    React.useEffect(() => {\n        getItem('poke-ball').then((res) => {\n            setItem(res.data);\n        });\n    }, [count]);\n\n    const handleInputChange = (e) => {\n        setCount(e.target.value);\n    };\n\n    let tackle: Move = {\n        move_name: 'Tackle',\n        power: 40,\n        accuracy: 100,\n        type: 'Normal',\n        pp: 35,\n        effect: 'Charges the foe with a full-body tackle.',\n    };\n\n    let acid: Move = {\n        move_name: 'Acid',\n        power: 40,\n        accuracy: 100,\n        type: 'Poison',\n        pp: 30,\n        effect: \"Has a chance to lower the target's Special Defense\",\n    };\n\n    let airMail: Item = {\n        item_name: 'air-mail',\n        item_description: 'placeholder desc',\n    };\n\n    let myBulbasaur: Pokemon = {\n        pkID: 9,\n        nickname: 'Whipper',\n        level: 100,\n        moves: [tackle, acid],\n        baseInfo: base,\n        holding: airMail,\n    };\n\n    const [pkmn, setPkmn] = useState<Pokemon>(myBulbasaur);\n\n    function handleSetPokemon(pkmn: Pokemon) {\n        setPkmn(pkmn);\n    }\n\n    React.useEffect(() => {\n        getSpecificPokemon(1).then((res) => {\n            console.log(res.data);\n            //setPkmn(res.data);\n        });\n    }, []);\n\n    function makeImage(sprite: string) {\n        return <img src={sprite} className=\"photo\"></img>;\n    }\n\n    let arr: number[] = [1, 2, 3];\n    function makeButton(num: number) {\n        return (\n            <>\n                <TextField name=\"name\" label={'Party:' + num} type=\"number\" value={num} />\n                <br></br>\n            </>\n        );\n    }\n\n    function genParty(num: number) {\n        const items = [];\n        for (let i = 0; i < num; i++) {\n            items.push(\n                <>\n                    <button onClick={() => setCount(count + 1)}>Generate Party</button>\n                    <br></br>\n                </>,\n            );\n        }\n        return items;\n    }\n\n    return (\n        <Grid container spacing={3} justify=\"center\">\n            <Grid item xs={4}>\n                <div>\n                    Charles's Testing Room\n                    {makeImage('https://img.pokemondb.net/artwork/bulbasaur.jpg')}\n                    <p>You clicked {count} times</p>\n                    <button onClick={() => setCount(count + 1)}>Click me</button>\n                    <br></br>\n                    <TextField name=\"name\" label=\"PK_ID\" type=\"number\" onChange={handleInputChange} value={count} />\n                    <PokemonCard pk_id={count}> </PokemonCard>\n                    <div>hello</div>\n                    {arr.map((num) => makeButton(num))}\n                    {genParty(4 - arr.length)}\n                </div>\n            </Grid>\n        </Grid>\n    );\n}\nexport default TestCharles;\n","import React from 'react'; // we need this to make JSX compile\r\nimport { imageURL } from '../../types/types';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Grid, { GridSpacing } from '@material-ui/core/Grid';\r\nimport '../../styles.css';\r\nimport {\r\n    getImagesURLS,\r\n} from '../../axios/api';\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(1),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n        },\r\n    }),\r\n);\r\n\r\ninterface WelcomeProps {\r\n    partyID: number;\r\n}\r\n\r\nconst PartySelectScreen: React.FC<WelcomeProps> = (props) => {\r\n    const classes = useStyles();\r\n    let partyID: number = props.partyID;\r\n\r\n    /*\r\n    let partiesIDs: numbers[] = []];\r\n    getPartyGivenUsername(props.username).then((res2)=>{\r\n        partiesIDs = res2.data;\r\n    })\r\n    function makeImage(sprite: string){\r\n        return (<img src ={sprite} className=\"photo\"></img>);\r\n    }\r\n    */\r\n\r\n    //Grid spacing\r\n    const [spacing, setSpacing] = React.useState<GridSpacing>(2);\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSpacing(Number((event.target as HTMLInputElement).value) as GridSpacing);\r\n    };\r\n\r\n    //partyID\r\n    const [partID, setPartID] = React.useState<number>(partyID);\r\n\r\n    //imagesURL array\r\n    const [imageURLs, setimageURLs] = React.useState<imageURL[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        getImagesURLS(partyID).then((res) => {\r\n            setimageURLs(res.data);\r\n            //console.log(\"ImagesURLS: \"+res.data);\r\n        });\r\n    }, [partID, partyID]);\r\n\r\n    let width = 'width: 50px';\r\n\r\n    /*\r\n        {imageURLs.map((url) => (\r\n            <div className=\"party\">\r\n                <p>{JSON.stringify(url)}</p>\r\n            </div>\r\n        ))}\r\n    */\r\n\r\n    return (\r\n        <Grid container className={classes.root} spacing={2}>\r\n            <Grid item xs={12}>\r\n                <Grid container justify=\"center\" spacing={spacing}>\r\n                    <div className=\"party\">\r\n                        <h1 className=\"inLine\">{partyID}</h1>\r\n                        {imageURLs.map((url) => (\r\n                            <img src={url.sprite_data} className=\"photo\"></img>\r\n                        ))}\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\nexport default PartySelectScreen;\r\n","import React from 'react'; // we need this to make JSX compile\r\nimport { imageURL } from '../../types/types';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport '../../styles.css';\r\nimport { getImagesURLS, addParty } from '../../axios/api';\r\nimport Button from '@material-ui/core/Button';\r\nimport { red } from '@material-ui/core/colors';\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(1),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n        },\r\n        media: {\r\n            height: 0,\r\n            paddingTop: '100.00%', // 16:9\r\n        },\r\n        expand: {\r\n            transform: 'rotate(0deg)',\r\n            marginLeft: 'auto',\r\n            transition: theme.transitions.create('transform', {\r\n                duration: theme.transitions.duration.shortest,\r\n            }),\r\n        },\r\n        expandOpen: {\r\n            transform: 'rotate(180deg)',\r\n        },\r\n        avatar: {\r\n            backgroundColor: red[500],\r\n        },\r\n        button: {\r\n            margin: theme.spacing(1),\r\n        },\r\n    }),\r\n);\r\n\r\ninterface WelcomeProps {\r\n    userID: number;\r\n}\r\n\r\nconst AddParty: React.FC<WelcomeProps> = (props) => {\r\n    const classes = useStyles();\r\n    let userID: number = props.userID;\r\n\r\n    //partyID\r\n    const [user_ID, setUserID] = React.useState<number>(userID);\r\n\r\n    //imagesURL array\r\n    const [imageURLs, setimageURLs] = React.useState<imageURL[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        getImagesURLS(user_ID).then((res) => {\r\n            setimageURLs(res.data);\r\n            //console.log(\"ImagesURLS: \"+res.data);\r\n        });\r\n    }, [user_ID]);\r\n\r\n    const [expanded, setExpanded] = React.useState(true);\r\n\r\n    const handleSave = () => {\r\n        addParty(userID)\r\n            .then((res) => {\r\n                //console.log(user_ID);\r\n                console.log(res.data);\r\n                alert('Successfully Added To User: ' + userID +'! party_id: ' + res.data['party_id']);\r\n            })\r\n            .catch(() => {\r\n                alert('Exception Caught');\r\n            });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <br></br>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                startIcon={<Icon className=\"fa fa-plus-circle\" style={{ fontSize: 30 }} />}\r\n                onClick={handleSave}\r\n                fullWidth\r\n            >\r\n                Add Party\r\n            </Button>\r\n        </>\r\n    );\r\n};\r\nexport default AddParty;\r\n","import React, { useState } from 'react';\r\nimport { getBasePokemon, getItem, getSpecificPokemon, addPokemon, getPartyGivenUsername } from '../axios/api';\r\nimport { BasePokemon, Item, Pokemon, Move, Party, User } from '../types/types';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PartySelectScreen from '../components/PartySelectScreen/PartySelectScreen';\r\nimport AddParty from '../components/PartySelectScreen/AddParty';\r\n\r\nfunction TestLarry() {\r\n    // Declare a new state variable, which we'll call \"count\"\r\n\r\n    let bulbasaur: BasePokemon = {\r\n        pokedex_number: 1,\r\n        name: 'Bulbasaur',\r\n        type1: 'Grass',\r\n        type2: 'Poison',\r\n        hp: 45,\r\n        attack: 49,\r\n        defense: 49,\r\n        special_attack: 65,\r\n        special_defense: 65,\r\n        speed: 45,\r\n        sprite_data: 'https://img.pokemondb.net/artwork/bulbasaur.jpg',\r\n    };\r\n\r\n    let ivysaur: BasePokemon = {\r\n        pokedex_number: 1,\r\n        name: 'Bulbasaur',\r\n        type1: 'Grass',\r\n        type2: 'Poison',\r\n        hp: 60,\r\n        attack: 62,\r\n        defense: 63,\r\n        special_attack: 80,\r\n        special_defense: 80,\r\n        speed: 60,\r\n        sprite_data: 'https://img.pokemondb.net/artwork/ivysaur.jpg',\r\n    };\r\n\r\n    let palkia: BasePokemon = {\r\n        pokedex_number: 484,\r\n        name: 'Palkia',\r\n        type1: 'Dragon',\r\n        type2: 'Poison',\r\n        hp: 60,\r\n        attack: 62,\r\n        defense: 63,\r\n        special_attack: 80,\r\n        special_defense: 80,\r\n        speed: 60,\r\n        sprite_data: 'https://img.pokemondb.net/artwork/palkia.jpg',\r\n    };\r\n\r\n    const [count, setCount] = useState<number>(2);\r\n    const [level, setLevel] = useState<number>(90);\r\n    const [nickname, setNickname] = useState<String>('KI MI NO NA WA');\r\n    const [partyid, setPartyID] = useState<number>(1);\r\n    const [base, setBase] = useState<BasePokemon>(bulbasaur);\r\n    const [base2, setBase2] = useState<BasePokemon>(ivysaur);\r\n    const [base3, setBase3] = useState<BasePokemon>(palkia);\r\n    const [item, setItem] = useState<Item>();\r\n\r\n    const [username, setUsername] = useState<String>('admin1');\r\n\r\n    React.useEffect(() => {\r\n        getBasePokemon(count).then((res) => {\r\n            setBase(res.data);\r\n        });\r\n    }, [count]);\r\n\r\n    React.useEffect(() => {\r\n        getItem('poke-ball').then((res) => {\r\n            setItem(res.data);\r\n            //console.log(res.data);\r\n        });\r\n    }, [count]);\r\n\r\n    const handleInputChange = (e) => {\r\n        setCount(e.target.value);\r\n    };\r\n\r\n    const handleInputUsername = (e) => {\r\n        setUsername(e.target.value);\r\n    };\r\n\r\n    let tackle: Move = {\r\n        move_name: 'Tackle',\r\n        power: 40,\r\n        accuracy: 100,\r\n        type: 'Normal',\r\n        pp: 35,\r\n        effect: 'Charges the foe with a full-body tackle.',\r\n    };\r\n\r\n    let acid: Move = {\r\n        move_name: 'Acid',\r\n        power: 40,\r\n        accuracy: 100,\r\n        type: 'Poison',\r\n        pp: 30,\r\n        effect: \"Has a chance to lower the target's Special Defense\",\r\n    };\r\n\r\n    let airMail: Item = {\r\n        item_name: 'air-mail',\r\n        item_description: 'placeholder desc',\r\n    };\r\n\r\n    let myBulbasaur: Pokemon = {\r\n        pkID: 9,\r\n        nickname: 'Whipper',\r\n        level: 100,\r\n        moves: [tackle, acid],\r\n        baseInfo: base,\r\n        holding: airMail,\r\n    };\r\n\r\n    let myIvysaur: Pokemon = {\r\n        pkID: 7,\r\n        nickname: 'bubble-sort',\r\n        level: 99,\r\n        moves: [tackle],\r\n        baseInfo: base2,\r\n        holding: airMail,\r\n    };\r\n\r\n    let myPalkia: Pokemon = {\r\n        pkID: 5,\r\n        nickname: 'test',\r\n        level: 79,\r\n        moves: [tackle],\r\n        baseInfo: base3,\r\n        holding: airMail,\r\n    };\r\n\r\n    let part: Party = {\r\n        party_id: 1,\r\n        member: [myBulbasaur, myIvysaur, myPalkia, myBulbasaur, myIvysaur, myPalkia],\r\n    };\r\n\r\n    const [pokemon, setPokemon] = useState<Pokemon>();\r\n    function handleSetPokemon(pkmn: Pokemon) {\r\n        setPokemon(pkmn);\r\n    }\r\n\r\n    /*\r\n    React.useEffect(() => {\r\n        addPokemon(count, level, nickname, partyid).then((res) => {\r\n            console.log(res.data);\r\n        });\r\n    }, [count]);\r\n    */\r\n\r\n    let user1: User = {\r\n        user_id: 5,\r\n        username: 'Darwin',\r\n        party: [part, part, part, part, part, part],\r\n    };\r\n\r\n    //const [party_id, setID] = React.useState<number[]>([1]);\r\n\r\n    /*const [pary, setPary] = React.useState<Party>({\r\n        party_id: party_id,\r\n        member: member,\r\n    });*/\r\n\r\n    /*\r\n    React.useEffect(() => {\r\n        getPartyGivenUsername(username).then((res) => {\r\n            setID(res.data);\r\n        });\r\n    }, [party_id]);\r\n\r\n    */\r\n\r\n    return (\r\n        <div>\r\n            Larry's Testing Room\r\n            <p>You clicked {count} times</p>\r\n            <button onClick={() => setCount(count + 1)}>Click me</button>\r\n            <br></br>\r\n            <TextField name=\"name\" label=\"Pokedex Number\" onChange={handleInputChange} value={count} />\r\n            <TextField name=\"level\" label=\"Level\" onChange={handleInputChange} value={level} />\r\n            <TextField name=\"nickname\" label=\"Nickname\" onChange={handleInputChange} value={nickname} />\r\n            <TextField name=\"party id\" label=\"Party id\" onChange={handleInputChange} value={partyid} />\r\n            <TextField name=\"username\" label=\"Username\" onChange={handleInputUsername} value={username} />\r\n            <PartySelectScreen partyID={2}> </PartySelectScreen>\r\n            <AddParty userID={3}></AddParty>\r\n        </div>\r\n    );\r\n}\r\nexport default TestLarry;\r\n","import React, { useState } from 'react';\nimport {\n    getParty,\n    getUser,\n    getMove,\n    getUserID,\n    deleteParty,\n    deletePokemon,\n    loseItem,\n    verifyPassword,\n    createAccount,\n} from '../axios/api';\nimport { Party, Pokemon, BasePokemon, User, Move, Item, Loginer } from '../types/types';\nimport TextField from '@material-ui/core/TextField';\n\nfunction TestEldon() {\n    // Declare a new state variable, which we'll call \"count\"\n    let bulbasaur: BasePokemon = {\n        pokedex_number: 1,\n        name: 'Bulbasaur',\n        type1: 'Grass',\n        type2: 'Poison',\n        hp: 45,\n        attack: 49,\n        defense: 49,\n        special_attack: 65,\n        special_defense: 65,\n        speed: 45,\n        sprite_data: 'https://img.pokemondb.net/artwork/bulbasaur.jpg',\n    };\n    let move1: Move = {\n        move_name: 'jump',\n        power: 40,\n        accuracy: 100,\n        type: 'poison',\n        pp: 3,\n        effect: 'jumps on top of jammie',\n    };\n    let poki1: Pokemon = {\n        pkID: 4,\n        nickname: 'Charlie',\n        level: 5,\n        moves: [move1],\n        baseInfo: bulbasaur,\n    };\n    let party1: Party = {\n        party_id: 12,\n        member: [poki1],\n    };\n\n    let item1: Item = {\n        item_name: 'testItem',\n        item_description: 'testItemDesc',\n    };\n\n    const [count, setCount] = useState(1);\n    const [base, setBase] = useState<Party>(party1);\n    const [partyDel, setPartyDel] = useState<Party>(party1);\n    const [move, setMove] = useState<Move>(move1);\n    const [pokeDel, setPokeDel] = useState<Pokemon>(poki1);\n    const [itemDel, setItemDel] = useState<Item>(item1);\n\n    React.useEffect(() => {\n        deleteParty(count).then((res) => {\n            setPartyDel(res.data);\n        });\n    }, [count]);\n\n    React.useEffect(() => {\n        deletePokemon(11).then((res) => {\n            setPokeDel(res.data);\n        });\n    }, [count]);\n\n    React.useEffect(() => {\n        getMove('after-you').then((res) => {\n            setMove(res.data);\n            console.log(res.data);\n        });\n    }, [count]);\n\n    const handleInputChange = (e) => {\n        setCount(e.target.value);\n    };\n\n    let login1: Loginer = {\n        user: 'string',\n        password: 'string',\n    };\n\n    const [test, setTest] = useState<Loginer>(login1);\n    React.useEffect(() => {\n        verifyPassword('larry.cai', 'i_love_cats').then((res) => {\n            setTest(res.data);\n        });\n    }, [count]);\n\n    const [test2, setTest2] = useState<Loginer>(login1);\n    React.useEffect(() => {\n        createAccount('jammie.wang3', 'rickeyguo<3').then((res) => {\n            setTest2(res.data);\n        });\n    }, [count]);\n\n    return (\n        <div>\n            Eldon's Testing Room\n            <p>You clicked {count} times</p>\n            <button onClick={() => setCount(count + 1)}>Click me</button>\n            <TextField name=\"name\" label=\"Party Number\" onChange={handleInputChange} value={count} />\n            <p>{JSON.stringify(base)}</p>\n            <p>{JSON.stringify(move)}</p>\n            <p>{JSON.stringify(partyDel)}</p>\n            <p>{JSON.stringify(pokeDel)}</p>\n            <p>{JSON.stringify(itemDel)}</p>\n            <p>Password: {JSON.stringify(test)}</p>\n            <p>Password: {JSON.stringify(test2)}</p>\n        </div>\n    );\n}\nexport default TestEldon;\n","import React, { useState } from 'react';\r\nimport {\r\n    getMove,\r\n    deleteParty,\r\n    deletePokemon,\r\n    addParty,\r\n    learnMove,\r\n} from '../axios/api';\r\nimport { BasePokemon, Item, Pokemon, Move, Party, User } from '../types/types';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nfunction TestJammie() {\r\n    // Declare a new state variable, which we'll call \"count\"\r\n    //const [count, setCount] = useState(0);\r\n\r\n    let bulbasaur: BasePokemon = {\r\n        pokedex_number: 1,\r\n        name: 'Bulbasaur',\r\n        type1: 'Grass',\r\n        type2: 'Poison',\r\n        hp: 45,\r\n        attack: 49,\r\n        defense: 49,\r\n        special_attack: 65,\r\n        special_defense: 65,\r\n        speed: 45,\r\n        sprite_data: 'https://img.pokemondb.net/artwork/bulbasaur.jpg',\r\n    };\r\n    let move1: Move = {\r\n        move_name: 'jump',\r\n        power: 40,\r\n        accuracy: 100,\r\n        type: 'poison',\r\n        pp: 3,\r\n        effect: 'jumps',\r\n    };\r\n\r\n    let poki1: Pokemon = {\r\n        pkID: 4,\r\n        nickname: 'Charlie',\r\n        level: 5,\r\n        moves: [move1],\r\n        baseInfo: bulbasaur,\r\n    };\r\n    let party1: Party = {\r\n        party_id: 12,\r\n        member: [poki1],\r\n    };\r\n    let user1: User = {\r\n        user_id: 3,\r\n        username: 'Charles',\r\n        party: [],\r\n    };\r\n\r\n    let tackle: Move = {\r\n        move_name: 'Tackle',\r\n        power: 40,\r\n        accuracy: 100,\r\n        type: 'Normal',\r\n        pp: 35,\r\n        effect: 'Charges the foe with a full-body tackle.',\r\n    };\r\n\r\n    let acid: Move = {\r\n        move_name: 'Acid',\r\n        power: 40,\r\n        accuracy: 100,\r\n        type: 'Poison',\r\n        pp: 30,\r\n        effect: \"Has a chance to lower the target's Special Defense\",\r\n    };\r\n\r\n    const [count, setCount] = useState(1);\r\n    const [partyDel, setPartyDel] = useState<Party>(party1);\r\n    const [move, setMove] = useState<Move>(move1);\r\n    const [pokeDel, setPokeDel] = useState<Pokemon>(poki1);\r\n\r\n    // Only recognizing the most passed to ------------- here\r\n    const [moveLearned, setMoveLearned] = useState<Move>(move);\r\n    React.useEffect(() => {\r\n        learnMove(4, 'tackle', 'tackle', 'acid', 'acid');\r\n    }, [count]);\r\n\r\n    // not working!!!\r\n    const [addingParty, setAddParty] = useState<Party>(party1);\r\n    React.useEffect(() => {\r\n        addParty(count).then((res) => {\r\n            setAddParty(res.data);\r\n        });\r\n    }, [count]);\r\n\r\n    React.useEffect(() => {\r\n        deleteParty(count).then((res) => {\r\n            setPartyDel(res.data);\r\n        });\r\n    }, [count]);\r\n\r\n    React.useEffect(() => {\r\n        deletePokemon(11).then((res) => {\r\n            setPokeDel(res.data);\r\n        });\r\n    }, [count]);\r\n\r\n    React.useEffect(() => {\r\n        getMove('after-you').then((res) => {\r\n            setMove(res.data);\r\n            console.log(res.data);\r\n        });\r\n    }, [count]);\r\n\r\n    const handleInputChange = (e) => {\r\n        setCount(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            Jammie's Testing Room\r\n            <p>You clicked {count} times</p>\r\n            <button onClick={() => setCount(count + 1)}>Click me</button>\r\n            <TextField name=\"name\" label=\"Party Number\" onChange={handleInputChange} value={count} />\r\n            <p>{JSON.stringify(moveLearned)}</p>\r\n        </div>\r\n    );\r\n}\r\nexport default TestJammie;\r\n","import React, { useReducer, useEffect } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { verifyPassword, getPartyGivenUsername } from '../axios/api';\r\nimport { Link } from 'react-router-dom';\r\nimport PartySelectScreen from './PartySelectScreen/PartySelectScreen';\r\nimport { partyID } from '../types/types';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        container: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            width: 400,\r\n            margin: `${theme.spacing(0)} auto`,\r\n        },\r\n        loginBtn: {\r\n            marginTop: theme.spacing(2),\r\n            flexGrow: 1,\r\n        },\r\n        header: {\r\n            textAlign: 'center',\r\n            background: '#212121',\r\n            color: '#fff',\r\n        },\r\n        card: {\r\n            marginTop: theme.spacing(10),\r\n        },\r\n    }),\r\n);\r\n\r\n//state type\r\n\r\ntype State = {\r\n    username: string;\r\n    password: string;\r\n    isButtonDisabled: boolean;\r\n    helperText: string;\r\n    isError: boolean;\r\n    loggedIn: boolean;\r\n};\r\n\r\nconst initialState: State = {\r\n    username: '',\r\n    password: '',\r\n    isButtonDisabled: true,\r\n    helperText: '',\r\n    isError: false,\r\n    loggedIn: false,\r\n};\r\n\r\ntype Action =\r\n    | { type: 'setUsername'; payload: string }\r\n    | { type: 'setPassword'; payload: string }\r\n    | { type: 'setIsButtonDisabled'; payload: boolean }\r\n    | { type: 'loginSuccess'; payload: string }\r\n    | { type: 'loginFailed'; payload: string }\r\n    | { type: 'setIsError'; payload: boolean };\r\n\r\nconst reducer = (state: State, action: Action): State => {\r\n    switch (action.type) {\r\n        case 'setUsername':\r\n            return {\r\n                ...state,\r\n                username: action.payload,\r\n            };\r\n        case 'setPassword':\r\n            return {\r\n                ...state,\r\n                password: action.payload,\r\n            };\r\n        case 'setIsButtonDisabled':\r\n            return {\r\n                ...state,\r\n                isButtonDisabled: action.payload,\r\n            };\r\n        case 'loginSuccess':\r\n            return {\r\n                ...state,\r\n                helperText: action.payload,\r\n                isError: false,\r\n                loggedIn: true,\r\n            };\r\n        case 'loginFailed':\r\n            return {\r\n                ...state,\r\n                helperText: action.payload,\r\n                isError: true,\r\n            };\r\n        case 'setIsError':\r\n            return {\r\n                ...state,\r\n                isError: action.payload,\r\n            };\r\n    }\r\n};\r\n\r\nconst Login = () => {\r\n    const classes = useStyles();\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    //sets button to only enable if something is typed\r\n    useEffect(() => {\r\n        if (state.username.trim() && state.password.trim()) {\r\n            dispatch({\r\n                type: 'setIsButtonDisabled',\r\n                payload: false,\r\n            });\r\n        } else {\r\n            dispatch({\r\n                type: 'setIsButtonDisabled',\r\n                payload: true,\r\n            });\r\n        }\r\n    }, [state.username, state.password]);\r\n\r\n    const handleLogin = () => {\r\n        //need to check with database\r\n        //JSON.stringify(itemDel)\r\n        verifyPassword(state.username, state.password).then((res) => {\r\n            //pw = res.data;\r\n            //pass = pw.password;\r\n            if (!res.data) {\r\n                dispatch({\r\n                    type: 'loginFailed',\r\n                    payload: 'Incorrect password!',\r\n                });\r\n            } else {\r\n                dispatch({\r\n                    type: 'loginSuccess',\r\n                    payload: 'Login Successfully',\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleKeyPress = (event: React.KeyboardEvent) => {\r\n        if (event.keyCode === 13 || event.which === 13) {\r\n            state.isButtonDisabled || handleLogin();\r\n        }\r\n    };\r\n\r\n    const handleUsernameChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n        dispatch({\r\n            type: 'setUsername',\r\n            payload: event.target.value,\r\n        });\r\n    };\r\n\r\n    const handlePasswordChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n        dispatch({\r\n            type: 'setPassword',\r\n            payload: event.target.value,\r\n        });\r\n    };\r\n\r\n    function makeParty(num: number) {\r\n        return (\r\n            <>\r\n                <PartySelectScreen partyID={num}></PartySelectScreen>\r\n                <br></br>\r\n            </>\r\n        );\r\n    }\r\n\r\n    function genParty(num: number) {\r\n        return <h1>You Successfully Logged In</h1>;\r\n    }\r\n\r\n    const [partyArr, setPartyArr] = React.useState<partyID[]>([]);\r\n    React.useEffect(() => {\r\n        getPartyGivenUsername(state.username).then((res) => {\r\n            setPartyArr(res.data);\r\n        });\r\n    }, [state.username]);\r\n\r\n    if (state.loggedIn) {\r\n        return (\r\n            <div>\r\n                {partyArr.map((num) => makeParty(num.party_id))}\r\n                {genParty(4 - partyArr.length)}\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <form className={classes.container} noValidate autoComplete=\"off\">\r\n                <Card className={classes.card}>\r\n                    <CardHeader className={classes.header} title=\"Login to play Pokemon!\" />\r\n                    <CardContent>\r\n                        <div>\r\n                            <TextField\r\n                                error={state.isError}\r\n                                fullWidth\r\n                                id=\"username\"\r\n                                type=\"email\"\r\n                                label=\"Username\"\r\n                                placeholder=\"Username\"\r\n                                margin=\"normal\"\r\n                                onChange={handleUsernameChange}\r\n                                onKeyPress={handleKeyPress}\r\n                            />\r\n                            <TextField\r\n                                error={state.isError}\r\n                                fullWidth\r\n                                id=\"password\"\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                placeholder=\"Password\"\r\n                                margin=\"normal\"\r\n                                helperText={state.helperText}\r\n                                onChange={handlePasswordChange}\r\n                                onKeyPress={handleKeyPress}\r\n                            />\r\n                        </div>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                            color=\"secondary\"\r\n                            className={classes.loginBtn}\r\n                            onClick={handleLogin}\r\n                            disabled={state.isButtonDisabled}\r\n                        >\r\n                            Login\r\n                        </Button>\r\n                    </CardActions>\r\n                    <CardActions>\r\n                        <Link to=\"/components/Signup\">\r\n                            <Button variant=\"contained\" size=\"large\" color=\"secondary\" className={classes.loginBtn}>\r\n                                Sign up!\r\n                            </Button>\r\n                        </Link>\r\n                    </CardActions>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Login;\r\n","import React, { useReducer, useEffect, useState } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { createAccount, getPartyGivenUsername } from '../axios/api';\r\nimport { Loginer } from '../types/types';\r\nimport PartySelectScreen from './PartySelectScreen/PartySelectScreen';\r\nimport { partyID } from '../types/types';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        container: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            width: 400,\r\n            margin: `${theme.spacing(0)} auto`,\r\n        },\r\n        loginBtn: {\r\n            marginTop: theme.spacing(2),\r\n            flexGrow: 1,\r\n        },\r\n        header: {\r\n            textAlign: 'center',\r\n            background: '#212121',\r\n            color: '#fff',\r\n        },\r\n        card: {\r\n            marginTop: theme.spacing(10),\r\n        },\r\n    }),\r\n);\r\n\r\n//state type\r\n\r\ntype State = {\r\n    username: string;\r\n    password: string;\r\n    confirm: string;\r\n    isButtonDisabled: boolean;\r\n    helperText: string;\r\n    isError: boolean;\r\n    loggedIn: boolean;\r\n};\r\n\r\nconst initialState: State = {\r\n    username: '',\r\n    password: '',\r\n    confirm: '',\r\n    isButtonDisabled: true,\r\n    helperText: '',\r\n    isError: false,\r\n    loggedIn: false,\r\n};\r\n\r\ntype Action =\r\n    | { type: 'setUsername'; payload: string }\r\n    | { type: 'setPassword'; payload: string }\r\n    | { type: 'setConfirmPassword'; payload: string }\r\n    | { type: 'setIsButtonDisabled'; payload: boolean }\r\n    | { type: 'loginSuccess'; payload: string }\r\n    | { type: 'loginFailed'; payload: string }\r\n    | { type: 'setIsError'; payload: boolean };\r\n\r\nconst reducer = (state: State, action: Action): State => {\r\n    switch (action.type) {\r\n        case 'setUsername':\r\n            return {\r\n                ...state,\r\n                username: action.payload,\r\n            };\r\n        case 'setPassword':\r\n            return {\r\n                ...state,\r\n                password: action.payload,\r\n            };\r\n        case 'setConfirmPassword':\r\n            return {\r\n                ...state,\r\n                confirm: action.payload,\r\n            };\r\n        case 'setIsButtonDisabled':\r\n            return {\r\n                ...state,\r\n                isButtonDisabled: action.payload,\r\n            };\r\n        case 'loginSuccess':\r\n            return {\r\n                ...state,\r\n                helperText: action.payload,\r\n                isError: false,\r\n                loggedIn: true,\r\n            };\r\n        case 'loginFailed':\r\n            return {\r\n                ...state,\r\n                helperText: action.payload,\r\n                isError: true,\r\n            };\r\n        case 'setIsError':\r\n            return {\r\n                ...state,\r\n                isError: action.payload,\r\n            };\r\n    }\r\n};\r\n\r\nconst Login = () => {\r\n    const classes = useStyles();\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    //sets button to only enable if something is typed\r\n    useEffect(() => {\r\n        if (state.username.trim() && state.password.trim() && state.confirm.trim()) {\r\n            dispatch({\r\n                type: 'setIsButtonDisabled',\r\n                payload: false,\r\n            });\r\n        } else {\r\n            dispatch({\r\n                type: 'setIsButtonDisabled',\r\n                payload: true,\r\n            });\r\n        }\r\n    }, [state.username, state.password, state.confirm]);\r\n\r\n    const handleSignup = () => {\r\n        let pw: Loginer = {\r\n            user: 'cats',\r\n            password: 'string',\r\n        };\r\n        let pass: String = '';\r\n        if (state.password != state.confirm) {\r\n            dispatch({\r\n                type: 'loginFailed',\r\n                payload: \"Passwords don't match\",\r\n            });\r\n        } else {\r\n            createAccount(state.username, state.password).then((res) => {\r\n                if (res.data) {\r\n                    dispatch({\r\n                        type: 'loginSuccess',\r\n                        payload: 'Sign Up Successful',\r\n                    });\r\n                } else {\r\n                    dispatch({\r\n                        type: 'loginFailed',\r\n                        payload: 'Account already exists! Try logging in instead.',\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleKeyPress = (event: React.KeyboardEvent) => {\r\n        if (event.keyCode === 13 || event.which === 13) {\r\n            state.isButtonDisabled || handleSignup();\r\n        }\r\n    };\r\n\r\n    const handleUsernameChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n        dispatch({\r\n            type: 'setUsername',\r\n            payload: event.target.value,\r\n        });\r\n    };\r\n\r\n    const handlePasswordChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n        dispatch({\r\n            type: 'setPassword',\r\n            payload: event.target.value,\r\n        });\r\n    };\r\n\r\n    const handleConfirmPasswordChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\r\n        dispatch({\r\n            type: 'setConfirmPassword',\r\n            payload: event.target.value,\r\n        });\r\n    };\r\n\r\n    function makeParty(num: number) {\r\n        return (\r\n            <>\r\n                <PartySelectScreen partyID={num}></PartySelectScreen>\r\n                <br></br>\r\n            </>\r\n        );\r\n    }\r\n\r\n    function genParty(num: number) {\r\n        return <h1>You Successfully Signed-up!</h1>;\r\n    }\r\n\r\n    const [partyArr, setPartyArr] = React.useState<partyID[]>([]);\r\n    React.useEffect(() => {\r\n        getPartyGivenUsername(state.username).then((res) => {\r\n            setPartyArr(res.data);\r\n        });\r\n    }, [state.username]);\r\n\r\n    if (state.loggedIn) {\r\n        return (\r\n            <div>\r\n                {partyArr.map((num) => makeParty(num.party_id))}\r\n                {genParty(4 - partyArr.length)}\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <form className={classes.container} noValidate autoComplete=\"off\">\r\n                <Card className={classes.card}>\r\n                    <CardHeader className={classes.header} title=\"Sign up to play Pokemon!\" />\r\n                    <CardContent>\r\n                        <div>\r\n                            <TextField\r\n                                error={state.isError}\r\n                                fullWidth\r\n                                id=\"username\"\r\n                                type=\"email\"\r\n                                label=\"Username\"\r\n                                placeholder=\"Username\"\r\n                                margin=\"normal\"\r\n                                onChange={handleUsernameChange}\r\n                                onKeyPress={handleKeyPress}\r\n                            />\r\n                            <TextField\r\n                                error={state.isError}\r\n                                fullWidth\r\n                                id=\"password\"\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                placeholder=\"Password\"\r\n                                margin=\"normal\"\r\n                                helperText={state.helperText}\r\n                                onChange={handlePasswordChange}\r\n                                onKeyPress={handleKeyPress}\r\n                            />\r\n                            <TextField\r\n                                error={state.isError}\r\n                                fullWidth\r\n                                id=\"confirmPassword\"\r\n                                type=\"password\"\r\n                                label=\"Confirm Password\"\r\n                                placeholder=\"Confirm Password\"\r\n                                margin=\"normal\"\r\n                                helperText={state.helperText}\r\n                                onChange={handleConfirmPasswordChange}\r\n                                onKeyPress={handleKeyPress}\r\n                            />\r\n                        </div>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                            color=\"secondary\"\r\n                            className={classes.loginBtn}\r\n                            onClick={handleSignup}\r\n                            disabled={state.isButtonDisabled}\r\n                        >\r\n                            Sign up!\r\n                        </Button>\r\n                    </CardActions>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react'; // we need this to make JSX compile\r\nimport {\r\n    BasePokemon,\r\n    AddPokemonPacket,\r\n    defaultBasePokemon,\r\n} from '../../types/types';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport {\r\n    addPokemon,\r\n    getAllBasePokemon,\r\n    getBasePokemon,\r\n} from '../../axios/api';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { red } from '@material-ui/core/colors';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Button from '@material-ui/core/Button';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { TextField, Grid } from '@material-ui/core';\r\nimport { Autocomplete } from '@material-ui/lab';\r\n\r\ninterface WelcomeProps {\r\n    party_id: number;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {},\r\n        media: {\r\n            height: 0,\r\n            paddingTop: '100.00%', // 16:9\r\n        },\r\n        expand: {\r\n            transform: 'rotate(0deg)',\r\n            marginLeft: 'auto',\r\n            transition: theme.transitions.create('transform', {\r\n                duration: theme.transitions.duration.shortest,\r\n            }),\r\n        },\r\n        expandOpen: {\r\n            transform: 'rotate(180deg)',\r\n        },\r\n        avatar: {\r\n            backgroundColor: red[500],\r\n        },\r\n        button: {\r\n            margin: theme.spacing(1),\r\n        },\r\n        textField: {\r\n            marginLeft: theme.spacing(1),\r\n            marginRight: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    }),\r\n);\r\n\r\nconst AddPokemon: React.FC<WelcomeProps> = (props) => {\r\n    let party_Id = props.party_id;\r\n\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = React.useState(true);\r\n    const [pkmn, setPkmn] = React.useState<AddPokemonPacket>({\r\n        nickname: '',\r\n        level: 100,\r\n        pokedex_number: 151,\r\n        baseInfo: defaultBasePokemon(),\r\n    });\r\n    const [allBasePokemon, setAllBasePokemon] = React.useState<BasePokemon[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        getAllBasePokemon().then((res) => {\r\n            setAllBasePokemon(res.data);\r\n        });\r\n        getBasePokemon(151).then((res) => {\r\n            setPkmn({ ...pkmn, baseInfo: res.data });\r\n        });\r\n    }, []);\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        let validLevel: boolean = pkmn.level >= 1 && pkmn.level <= 100;\r\n        if (validLevel) {\r\n            addPokemon(pkmn.pokedex_number, pkmn.level, pkmn.nickname, party_Id)\r\n                .then((res) => {\r\n                    console.log(res.data);\r\n                    alert('Successfully Added! PK_ID: ' + res.data['pk_id']);\r\n                })\r\n                .catch(() => {\r\n                    alert('Exception Caught');\r\n                });\r\n        } else {\r\n            alert('Invalid Level');\r\n        }\r\n    };\r\n\r\n    function handleInputChangeBasePokemon(event, value) {\r\n        setPkmn({ ...pkmn, baseInfo: value, pokedex_number: value.pokedex_number });\r\n    }\r\n\r\n    function handleInputChangeNickname(event) {\r\n        setPkmn({ ...pkmn, nickname: event.target.value });\r\n    }\r\n\r\n    function handleInputChangeLevel(event) {\r\n        console.log(event);\r\n        setPkmn({ ...pkmn, level: event.target.value });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.root} style={{backgroundColor: '#e6e5d3'}}>\r\n                <CardHeader\r\n                    avatar={\r\n                        <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n                            {pkmn ? pkmn.level : 0}\r\n                        </Avatar>\r\n                    }\r\n                    action={\r\n                        <IconButton aria-label=\"settings\">\r\n                            <MoreVertIcon />\r\n                        </IconButton>\r\n                    }\r\n                    title={pkmn ? pkmn.baseInfo.name : ''}\r\n                    subheader={pkmn ? pkmn.nickname : ''}\r\n                />\r\n                <CardMedia className={classes.media} image={pkmn.baseInfo.sprite_data} title={pkmn.baseInfo.name} />\r\n                <CardContent>\r\n                <div>\r\n                <Autocomplete\r\n                    id=\"combo-box-item\"\r\n                    options={allBasePokemon}\r\n                    getOptionLabel={(option) => option.name}\r\n                    onChange={handleInputChangeBasePokemon}\r\n                    renderInput={(params) => (\r\n                        <TextField {...params} label=\"Pokemon Selection\"  />\r\n                    )}\r\n                />\r\n            </div>\r\n            <br></br>\r\n            <div>\r\n                {' '}\r\n                <TextField\r\n                    id=\"standard-full-width\"\r\n                    label=\"Nickname\"\r\n                    style={{ margin: 8 }}\r\n                    margin=\"normal\"\r\n                    value={pkmn.nickname}\r\n                    onChange={handleInputChangeNickname}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n            </div>\r\n            <div>\r\n                {' '}\r\n                <TextField\r\n                    id=\"standard-full-width\"\r\n                    label=\"Level\"\r\n                    style={{ margin: 8 }}\r\n                    helperText=\"Level is between 1 and 100\"\r\n                    margin=\"normal\"\r\n                    value={pkmn.level}\r\n                    onChange={handleInputChangeLevel}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n            </div>\r\n                </CardContent>\r\n\r\n                <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                startIcon={<SaveIcon />}\r\n                onClick={handleSave}\r\n                fullWidth\r\n            >\r\n                Add Pokemon\r\n            </Button>\r\n            </Card>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddPokemon;\r\n","export class Boat {\n    bid: string;\n    bname: string;\n    color: string;\n\n    constructor(bid: string, bname: string, color: string) {\n        this.bid = bid;\n        this.bname = bname;\n        this.color = color;\n    }\n\n    public tostring = (): string => {\n        return `Boat (bid: ${this.bid}, bname: ${this.bname}, color: ${this.color})`;\n    };\n}\n\nexport type Person = {\n    name: string;\n    age: number;\n    parent?: Person;\n};\n\n//Specific\n\nexport type Party = {\n    party_id: number;\n    member: Pokemon[];\n};\n\nexport type BasePokemon = {\n    pokedex_number: number;\n    name: string;\n    type1: string;\n    type2?: string;\n    hp: number;\n    attack: number;\n    defense: number;\n    special_attack: number;\n    special_defense: number;\n    speed: number;\n    sprite_data: string;\n};\n\nexport type Pokemon = {\n    pkID: number;\n    nickname: string;\n    level: number;\n    holding?: Item;\n    moves: Move[];\n    baseInfo: BasePokemon;\n};\n\nexport type AddPokemonPacket = {\n    nickname: string;\n    level: number;\n    pokedex_number: number;\n    baseInfo: BasePokemon;\n};\n\nexport type Item = {\n    item_name: string;\n    item_description: string;\n};\n\nexport type User = {\n    user_id: number;\n    username: string;\n    party: Party[];\n    //party: number[]; array of partyID\n};\n\nexport type Move = {\n    move_name: string;\n    power: number;\n    accuracy: number;\n    type: string;\n    pp: number;\n    effect: string;\n};\n\nexport type Loginer = {\n    user: String;\n    password: string;\n};\n\nexport type PokemonPacket = {\n    pkID: number;\n    nickname: string;\n    level: number;\n    pokedex_number: number;\n    name: string;\n    type1: string;\n    type2?: string;\n    hp: number;\n    attack: number;\n    defense: number;\n    special_attack: number;\n    special_defense: number;\n    speed: number;\n    sprite_data: string;\n    holding?: Item;\n    moves: Move[];\n};\n\nexport const emptyMoves = () => {\n    return [\n        {\n            move_name: 'm0',\n            power: 40,\n            accuracy: 100,\n            type: 'Poison',\n            pp: 30,\n            effect: 'e0',\n        },\n        {\n            move_name: 'm1',\n            power: 40,\n            accuracy: 100,\n            type: 'Poison',\n            pp: 30,\n            effect: 'e1',\n        },\n        {\n            move_name: 'm2',\n            power: 40,\n            accuracy: 100,\n            type: 'Poison',\n            pp: 30,\n            effect: 'e2',\n        },\n        {\n            move_name: 'm3',\n            power: 40,\n            accuracy: 100,\n            type: 'Poison',\n            pp: 30,\n            effect: 'e3',\n        },\n    ];\n};\n\nexport const defaultBasePokemon = () => {\n    return {\n        pokedex_number: 1,\n        name: 'defaultBaseName',\n        type1: 'type1',\n        type2: 'type2',\n        hp: 1,\n        attack: 2,\n        defense: 3,\n        special_attack: 4,\n        special_defense: 5,\n        speed: 6,\n        sprite_data: '',\n    };\n};\n\nexport type imageURL = {\n    sprite_data: string;\n};\n\nexport type partyID = {\n    party_id: number;\n};\n\nexport type pkids = {\n    pk_id: number;\n};\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport AddPokemon from './AddPokemon';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nfunction UserIDSelect() {\r\n    const [pid, setPid] = React.useState<number>(1);\r\n\r\n    const handleInputChangePid = (e) => {\r\n        setPid(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            spacing={0}\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            justify=\"center\"\r\n            style={{ minHeight: '100vh' }}\r\n        >\r\n            <Grid item xs={4}>\r\n                <div style={{ width: '100%' }}>\r\n                    <p>Party ID: {pid} </p>\r\n                    <br></br>\r\n                    <TextField\r\n                        name=\"name\"\r\n                        label=\"Party_ID\"\r\n                        type=\"number\"\r\n                        onChange={handleInputChangePid}\r\n                        value={pid}\r\n                        fullWidth\r\n                    />\r\n                    <div>\r\n                        <AddPokemon party_id={pid}></AddPokemon>\r\n                    </div>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\nexport default UserIDSelect;\r\n","import React from 'react'; // we need this to make JSX compile\r\nimport { pkids } from '../../types/types';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport PokemonCard from '../pokemonCard/PokemonCard';\r\nimport Grid, { GridSpacing } from '@material-ui/core/Grid';\r\nimport { getPartyIDs } from '../../axios/api';\r\nimport AddPokemon from '../addPokemon/AddPokemon';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(1),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n        },\r\n    }),\r\n);\r\n\r\ninterface WelcomeProps {\r\n    //party: Party;\r\n    pkids: number[];\r\n    partyID: number;\r\n}\r\n\r\nconst PartyScreen: React.FC<WelcomeProps> = (props) => {\r\n    const classes = useStyles();\r\n\r\n    //pk_id array\r\n    let pkids: number[] = props.pkids;\r\n\r\n    //partyID\r\n    let partyID: number = props.partyID;\r\n\r\n    //Grid Spacing\r\n    const [spacing, setSpacing] = React.useState<GridSpacing>(2);\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSpacing(Number((event.target as HTMLInputElement).value) as GridSpacing);\r\n    };\r\n\r\n    //partyID\r\n    const [thispartyID, setPartyID] = React.useState<number>(partyID);\r\n\r\n    //pk_id of pokemon in Party\r\n    const [partyIDs, setPartyIDs] = React.useState<pkids[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        getPartyIDs(partyID).then((res) => {\r\n            setPartyIDs(res.data);\r\n            console.log('PartyIDs: ' + res.data);\r\n        });\r\n    }, [thispartyID, partyID]);\r\n\r\n    /*Party Screen given pkid's\r\n    {pkids.map((pkid, index) => {\r\n        return <PokemonCard pk_id={pkid}> </PokemonCard>\r\n    })}\r\n    */\r\n\r\n    /*Party Screen given partyid\r\n    {partyIDs.map((res) => (\r\n        <PokemonCard pk_id={res.pk_id}> </PokemonCard>\r\n    ))}\r\n    */\r\n\r\n    return (\r\n        <Grid container className={classes.root} spacing={2}>\r\n            <Grid container justify=\"center\" spacing={spacing}>\r\n                {partyIDs.map((res) => (\r\n                    <Grid item xs={2}>\r\n                        <PokemonCard pk_id={res.pk_id}> </PokemonCard>\r\n                    </Grid>\r\n                ))}\r\n                <Grid item xs={2}>\r\n                    {partyIDs.length < 6 && <AddPokemon party_id={partyID}></AddPokemon>}\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\nexport default PartyScreen;\r\n","import React from 'react';\r\nimport { getPartyGivenUserId } from '../../axios/api';\r\nimport { partyID} from '../../types/types';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PartySelectScreen from '../PartySelectScreen/PartySelectScreen';\r\nimport PartyScreen from '../PartyScreen/PartyScreen';\r\nimport AddParty from '../PartySelectScreen/AddParty';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nfunction AdminView() {\r\n\t\tconst [userId, setUserId] = React.useState<number>(1);\r\n\t\tconst [partyId, setPartyId] = React.useState<number>(1);\r\n\t\tconst [myPartyIds, setMyPartyIds] = React.useState<partyID[]>([]);\r\n\t\tconst [partyNumbers, setPartyNumbers] = React.useState<number[]>([]);\r\n\r\n        const handleInputChangeUserId = (e) => {\r\n\t\t\tsetUserId(e.target.value);\r\n\t\t};\r\n        const handleInputChangePartyId = (e) => {\r\n\t\t\tsetPartyId(e.target.value);\r\n\t\t};\r\n\r\n\t\tReact.useEffect(() => {\r\n\t\t\tgetPartyGivenUserId(userId).then((res)=>{\r\n\t\t\t\tsetMyPartyIds(res.data);\r\n\t\t\t})\r\n\t\t}, [userId]);\r\n\r\n\t\tlet partyIDArray = [];\r\n\t\tReact.useEffect(() => {\r\n\t\t\tpartyIDArray = [];\r\n\t\t\tfor(let id of myPartyIds ){\r\n\t\t\t\tpartyIDArray.push(id.party_id)\r\n\t\t\t}\r\n\t\t\tsetPartyNumbers(partyIDArray);\r\n\t\t}, [myPartyIds]);\r\n\t\t\r\n    return (\r\n        <Grid container spacing={3} justify=\"center\">\r\n\t\t\t<Grid xs={3}>\r\n\t\t\t\t<div>\r\n\t\t\t\t<h1>User Parties</h1>\r\n\t\t\t<p>{\"My Parties: \" +JSON.stringify(partyNumbers)}</p>\r\n\t\t\t\t<h5>User ID: {userId}</h5>\r\n\t\t\t\t<TextField name=\"name\" label=\"User ID\" type=\"number\" onChange={handleInputChangeUserId} value={userId} />\r\n\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</Grid>\r\n            <Grid item xs={3}>\r\n\t\t\t\t<div>\r\n\t\t\t\t<h1>Party Viewer</h1>\r\n\t\t\t\t\t<h5>Party ID: {partyId}</h5> \r\n\t\t\t\t\t<TextField name=\"name\" label=\"Party ID\" type=\"number\" onChange={handleInputChangePartyId} value={partyId} />\r\n\t\t\t\t</div>\r\n\t\t\t\t<br></br>\r\n\t\t\t\t<PartySelectScreen partyID={partyId}> </PartySelectScreen>\r\n            \t<AddParty userID={userId}></AddParty>\r\n            </Grid>\r\n\t\t\t<Grid item xs={12}>\r\n\t\t\t\t<PartyScreen pkids={[]}  partyID={partyId}></PartyScreen>\r\n\t\t\t</Grid>\r\n        </Grid>\r\n    );\r\n}\r\nexport default AdminView;\r\n","import React, { Component, useState } from 'react';\r\nimport './App.css';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport ButtonAppBar from './components/ButtonAppBar';\r\n\r\nimport TestCharles from './test/TestCharles';\r\nimport TestLarry from './test/TestLarry';\r\nimport TestEldon from './test/TestEldon';\r\nimport TestJammie from './test/TestJammie';\r\nimport Login from './components/Login';\r\nimport Signup from './components/Signup';\r\nimport UserIDSelect from './components/addPokemon/UserIDSelect';\r\nimport AdminView from './components/adminView/AdminView';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <ButtonAppBar />\r\n                <Switch>\r\n                    {' '}\r\n                    {/* The Switch decides which component to show based on the current URL.*/}\r\n                    <Route exact path=\"/\" component={Login}></Route>\r\n                    <Route exact path=\"/test/charles\" component={TestCharles}></Route>\r\n                    <Route exact path=\"/test/larry\" component={TestLarry}></Route>\r\n                    <Route exact path=\"/test/eldon\" component={TestEldon}></Route>\r\n                    <Route exact path=\"/test/jammie\" component={TestJammie}></Route>\r\n                    <Route exact path=\"/components/Login\" component={Login}></Route>\r\n                    <Route exact path=\"/components/Signup\" component={Signup}></Route>\r\n                    <Route exact path=\"/components/AddPokemon\" component={UserIDSelect}></Route>\r\n                    <Route exact path=\"/components/HomeView\" component={AdminView}></Route>\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App /> {/* The various pages will be displayed by the `Main` component. */}\n    </BrowserRouter>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}